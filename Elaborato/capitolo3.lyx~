#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\begin_preamble
% INTESTAZIONI
% -----------------

\usepackage{fancyhdr}
\pagestyle{fancy}
\fancyhead{}
\fancyfoot{}
\rfoot{\thepage}
\chead{\includegraphics[width=\textwidth]{intestazione.pdf}}


% SFONDO
% ----------

\usepackage{eso-pic,graphicx}
\makeatletter
\newcommand\BackgroundPicture[2]{
\setlength{\unitlength}{1pt}
\put(0,\strip@pt\paperheight){
\parbox[t][\paperheight]{\paperwidth}{
\vfill
\centering\includegraphics[angle=#2]{#1}
\vfill
}
}
}
\makeatother
\end_preamble
\use_default_options true
\master tesi.lyx
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "times" "default"
\font_sans "helvet" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize 12
\spacing double
\use_hyperref true
\pdf_bookmarks false
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3.5cm
\topmargin 3cm
\rightmargin 2cm
\bottommargin 2.5cm
\headheight 2cm
\headsep 0.5cm
\secnumdepth 1
\tocdepth 1
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle empty
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Implementazione
\end_layout

\begin_layout Section
Catalogo Dei Componenti
\end_layout

\begin_layout Section
Dettagli Implementativi
\end_layout

\begin_layout Standard
Per l'implementazione di SmartLock sono stati utilizzati diversi Design
 Pattern tra cui:
\end_layout

\begin_layout Itemize
Singleton
\end_layout

\begin_layout Itemize
Creator
\end_layout

\begin_layout Itemize
Information Expert 
\end_layout

\begin_layout Itemize
Observer
\end_layout

\begin_layout Itemize
Polimorfismo
\end_layout

\begin_layout Subsection
Singleton
\end_layout

\begin_layout Standard
Il design pattern singleton, presentato dalla Gang of Four, è una soluzione
 a problemi ricorrenti relativi alla programmazione ad oggetti.
 In particolare è un Pattern Creazionale utilizzato per ottenere un'unica
 istanza di un oggetto, fornendo un unico punto di accesso globale.
 La classe StyleManager implementata tramite Singleton Pattern prevede la
 scelta di diversi Temi per l'UI dell'applicazione.
 Le funzioni implementate all'interno di tale classe riguardano la creazione
 di elementi dell'User Inferface, riutilizzati nei relativi controller per
 creare gli oggetti dell'interfaccia.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename immagini/singleton-style.png
	lyxscale 45
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
StyleManager con Singleton Pattern
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Tramite la costante shared definiamo un unico punto di accesso alla classe
 StyleManager, che sarà richiamata nei ViewController AccessScreenViewController
 e CodeAccessViewController.
 Nel seguente esempio è stato utilizzato StyleManager per creare l'istanza
 di un UIButton personalizzato:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,basicstyle={\tiny\ttfamily}"
inline false
status open

\begin_layout Plain Layout

accessButton = StyleManager.shared.getButton(size: CGSize(width: self.view.frame.size.
width/3, 
\end_layout

\begin_layout Plain Layout

				height: self.view.frame.size.width/8),
\end_layout

\begin_layout Plain Layout

				center: CGPoint(x: self.view.frame.size.width/2,
\end_layout

\begin_layout Plain Layout

				y: self.view.frame.size.height/2 + self.codeTextField.frame.height + 30),
\end_layout

\begin_layout Plain Layout

				text: "Accedi")
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Creator
\end_layout

\begin_layout Standard
Il Pattern Creator fa parte dei Pattern GRASP i quali forniscono in generale
 delle linee guida per l'assegnazione delle responsabilità ad oggetti che
 collaborano all'interno del sistema.
 In particolare il pattern creator definisce chi crea un oggetto e chi deve
 crearne un'istanza.
 La classe DataController è stata implementata utilizzando il pattern Creator
 per l'accesso alle query del database Core Data.
 All'interno dell'oggetto DataManager sono contenute le funzionalità di
 accesso al database (fetch, delete, insert) e tale oggetto è chiamato all'inter
no delle classi che implementano la logica di business per accedere al metodo
 richiesto.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename immagini/creator-data.png
	lyxscale 50
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
DataController con Pattern Creator
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Information Expert
\end_layout

\begin_layout Standard
Dato un oggetto il pattern Information Expert consigna di assegnare ad esso
 solo le responsabilità per cui ha le informazioni necessarie a soddisfare
 la richiesta.
 Nell'applicazione è stato utilizzato il pattern IE all'interno del DataControll
er per far riferimento alla gestione delle classi Utente e Accesso del database,
 questo perchè le informazioni relative a tali oggetti sono contenute all'intern
o delle richieste gestite dal DataController e vengono risolte solamente
 da esso, isolando il resto dell'applicazione dalla responsabilità di doverle
 implementare.
 
\end_layout

\begin_layout Subsection
Observer
\end_layout

\begin_layout Standard
Assegna all'oggetto monitorato il ruolo di registrare al suo interno un
 riferimento agli altri oggetti che devono essere avvisati dei cambiamenti
 (osservatori concreti) tramite l'invocazione di un loro metodo.
 Nell'applicazione si è applicato il pattern Observer per in due casi, infatti
 AppViewController monitora due eventi:
\end_layout

\begin_layout Itemize
“receivedMessage” : per ottimizzare la comunicazione bluetooth si è utilizzata
 un'architettura ad eventi, si riceve una risposta solo all'invio di un
 particolare messaggio (apri, chiudi..).
 
\end_layout

\begin_layout Itemize
“deviceConnected”: per notificare l'applicazione dell'evento relativo alla
 presenza del dispositivo bluetooth a cui collegarsi.
 
\end_layout

\begin_layout Subsection
Polimorfismo
\end_layout

\begin_layout Standard
E' stato poi utilizzato il Pattern GRASP relativo al Polimorfismo per la
 realizzazione dei ViewController dato che questi condividevano una stessa
 struttura di base relativa all'interfaccia grafica, da estendere in entrambi
 in base alle esigenze.
 Questo si può osservare anche nel Class Diagram dei controller dove AccessScree
nViewController e CodeAccessViewController ereditano AppViewController e
 in particolare estendono il metodo setupUserInterface() per estendere la
 GUI.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename immagini/cd-controllers.png
	lyxscale 35
	scale 35

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Class Diagram - Controllers
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Deployment
\end_layout

\begin_layout Subsection
Deployment Diagram
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename immagini/deployment.png
	lyxscale 35
	scale 35

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Deployment Diagram - SmartLock
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Simulazione
\end_layout

\end_body
\end_document
